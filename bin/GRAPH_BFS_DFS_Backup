import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.LinkedList;

import java.util.Map;
import java.util.HashMap;

enum ColorType {
	White,
	Gray,
	Black
}

class Vertex{
	Integer Val;
	ColorType Color; //White or Grey or Black
	Integer d;
	Integer f;
	Integer p;
		
	public Vertex(int V, ColorType C, Integer dist, Integer parent){
		Val = V;
		Color = C;
		d = dist;
		p = parent;
	}
	
	public Vertex() {
		Val = 0;
		this.Color = ColorType.White;
		d = Integer.MAX_VALUE;
		f = 0;
		p = 0;		
	}
	
	public void setVertex(int V, ColorType C, Integer dist, Integer f){
		Val = V;
		Color = C;
		d = dist;
		this.f = f;
		p = 0;
	}
	
	public void setVertex(int V, ColorType C){
		Val = V;
		Color = C;
		d = 0;
		f = 0;
		p = 0;
	}

	int getVertex(){
		return Val;
	}
}


class Edge{
	Integer EndVertex;
	Integer Weight;
	
	Edge(Integer V, Integer W){
		EndVertex = V;
		Weight = W;
	}
	
	public Integer getEndVertex(){
		return EndVertex;
	}
	
	int getVertex(){
		return EndVertex;
	}
}
 

public class Graph 
{
	
   /* Makes use of Map collection to store the adjacency list for each vertex.*/
    private  Map<Integer, List<Edge> > Adjacency_List;	
	private  Map<Integer, Vertex> V = null;
	private int nVertices;
	
   /*
    * Initializes the map to with size equal to number of vertices in a graph
    * Maps each vertex to a given List Object 
    */
    public Graph(int number_of_vertices)
    {
    	nVertices = number_of_vertices;
    	V = new HashMap<Integer, Vertex>();
        Adjacency_List = new HashMap<Integer, List<Edge>>();	

    	for (int i = 1 ; i <= nVertices ; i++)
        	V.put(i , new Vertex(i,ColorType.White, Integer.MAX_VALUE, 0));
        
        for (int i = 1 ; i <= number_of_vertices ; i++)
            Adjacency_List.put(i, new LinkedList<Edge>());        
    }

 
    /* Adds nodes in the Adjacency list for the corresponding vertex */
    public void setEdge(int source , int destination, int directed, int weight) //directed = 1 means directed, otherwise not
    {
       if (source > Adjacency_List.size() || destination > Adjacency_List.size())
       {
           System.out.println("the vertex entered in not present ");
           return;
       }

       List<Edge> slist = Adjacency_List.get(source);
  	   slist.add(new Edge(destination, weight));

  	   if(directed != 1){				//not directed
  	  	   List<Edge> dlist = Adjacency_List.get(destination);             
  	       dlist.add(new Edge(source, weight));  		   
  	   }
   }

 
    /* Returns the List containing the vertex joining the source vertex */		
    public List<Edge> getEdge(int source)
    {
        if (source > Adjacency_List.size())
        {
            System.out.println("The vertex " + source + " is not present");
            return null;
        }
                
        return Adjacency_List.get(source);
    }


    /* Prints the adjacency List representing the graph.*/    
    public void printAdjacencyList(){

    	System.out.println("Adjacency List for the graph :");
        for (int i = 1 ; i <= nVertices ; i++)
        {
            System.out.print(i+"->[");
            List<Edge> edgeList =  this.getEdge(i);
            for (int j = 1 ; ; j++ )
            {
           	 if(!edgeList.isEmpty()){
                    if (j != edgeList.size())
                    {
                        System.out.print((edgeList.get(j - 1)).getVertex()+"->");
                    }else
                    {
                        System.out.print((edgeList.get(j - 1)).getVertex() + "]");
                        break;
                    }                		 
           	 }else
           		 break;

            }
            System.out.println();					
         }
    	
    }
   
    void BFS(int source){
    	
    	System.out.println("In BFS with source : " + source);
        
   	    LinkedList<Vertex> Q=new LinkedList<Vertex>(); 
        int u;
       	int v;        

   	    V.get(source).setVertex(source,ColorType.Gray, 0, 0);
    	Q.addLast(V.get(source));  	
    	while(!Q.isEmpty()){
    		u = (Q.removeFirst()).getVertex();
    		System.out.print(u);
    		
    		List<Edge> ulist = Adjacency_List.get(u);
        	for(Iterator<Edge> it = ulist.iterator(); it.hasNext(); ){
        		Edge e = it.next();
        		v = e.getEndVertex();
        		if(	V.get(v).Color == ColorType.White){
        			V.get(v).Color = ColorType.Gray;
        			V.get(v).d = V.get(u).d + 1;
        			V.get(v).p = V.get(u).getVertex(); 
        			Q.addLast(V.get(v));
        		}
        		V.get(u).Color = ColorType.Black;
        	}    		
        	if(!Q.isEmpty())
        		System.out.print(" -> ");
    	}
    	System.out.println();
    }    
    
    
    
    void DFS(){
    	int time = 0;
    	System.out.println("----------DFS---------");
    	
    	for(int i=1 ; i<= nVertices ; i++){
    		V.get(i).setVertex(i, ColorType.White, 0, 0 );
    	}
    	
    	for(int i=1 ; i<= nVertices ; i++){
    		if(V.get(i).Color == ColorType.White)
    			time = DFS_VISIT(i, time);
     	}
    	
    	for(int i =1 ;i <= nVertices; i++){
    		System.out.println("Node "+ i + " -> (" + V.get(i).d +", " + V.get(i).f + ")" );    		
    	}

    }
    
    int DFS_VISIT(int u, int time){
    	
    	int v;    	
    	time = time + 1;
    	
    	V.get(u).d = time;
    	V.get(u).Color = ColorType.Gray;
    	List<Edge> ulist = Adjacency_List.get(u);
    	for(Iterator<Edge> it = ulist.iterator(); it.hasNext(); ){
    		Edge e = it.next();
    		v = e.getEndVertex();
    		if(	V.get(v).Color == ColorType.White){
    			V.get(v).p = u; 
    			time = DFS_VISIT(v,time);
    		}
    	}
		V.get(u).Color = ColorType.Black;
		time = time + 1;
		V.get(u).f = time; 
		    	
    	return time;
    }
    

    /*
     * Main Function reads the number of vertices and edges in a graph.
     * then creates a Adjacency List for the graph and prints it  
     */

    public static void main(String...arg)
    {
        int source , destination;
        int start;
        int number_of_edges,number_of_vertices;
        int count = 1;
        int directed = 0;
        Scanner scan = new Scanner(System.in);
        try
        {
            /* Read the number of vertices and edges in graph */
            System.out.println("Enter the number of vertices and edges in graph");
            number_of_vertices = scan.nextInt();
            number_of_edges = scan.nextInt();
            System.out.println("Press 1 for Directed edges");
            directed = scan.nextInt();
            	
            
            Graph adjacencyList = new Graph(number_of_vertices);

            /* Reads the edges present in the graph */
            System.out.println("Enter "+ number_of_edges +" edges in the Format : <source index> <destination index>");
            while (count <= number_of_edges)
            {
                source = scan.nextInt();
                destination = scan.nextInt();
                adjacencyList.setEdge(source, destination, directed, 1);
                count++;
            }
            
            System.out.println("Enter the start node for BFS");
            start = scan.nextInt();
            adjacencyList.printAdjacencyList();
            adjacencyList.BFS(start);
            adjacencyList.DFS();
                        
         } 
         catch(InputMismatchException inputMismatch)
         {
             System.out.println("Error in Input Format. \nFormat : <source index> <destination index>");
         }
         scan.close();
    }
}